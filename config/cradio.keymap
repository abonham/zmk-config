/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define _DEFAULT 0
#define _LOWER 1
#define _RAISE 2
#define _TRI 3

&mt {
  flavor = "tap-preferred";
  tapping_term_ms = <200>;
};

/ { 

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        
         combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };
        
            combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };
        
                    combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };
        
                           combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        }; 
           combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
    };
        
    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RSFT>, <&kp SQT>, <&kp SCLN>;
        };
    };
    
        keymap {
                compatible = "zmk,keymap";
                
       		default_layer {
		bindings = <
		&kp Q &kp W &kp E &kp R &kp T 						    &kp Y &kp U &kp I &kp O &kp P 
		&mt LSFT A &kp S &kp D &kp F &kp G 			            &kp H &kp J &kp K &kp L &td0
		&mt LS(LGUI) Z &mt LCTL X &mt LALT C &kp V &kp B	    &kp N &kp M  &kp CMMA &kp DOT &mt LA(LC(LGUI)) FSLH
          				&lt 1 ESC &mt LGUI SPC  				&mt LGUI BKSP &lt 2 RET
		>;
		};
         
       		left_layer {
		bindings = <
		&kp NUM_1  &kp NUM_2    &kp NUM_3    &kp NUM_4    &kp NUM_5		&kp NUM_6 &kp NUM_7 &kp NUM_8 &kp NUM_9 &kp NUM_0 
		&kp TAB &kp SQT &kp DQT &kp PIPE &kp HASH                       &kp MINUS &kp EQL &kp PLUS &kp LBRC &kp RBRC
		&kp GRAVE &kp TILDE &kp BSLH &kp HASH &kp TAB 	                &kp GRAVE &kp MINUS &kp UNDER &kp LBKT &kp RBKT
					    &none  &kp LGUI  					            &kp RGUI &mo 3 
		>;
		};
		
		right_layer {
		bindings = <
		&kp BANG  &kp ATSN &kp HASH  &kp DLLR  &kp PRCT    			&kp CRRT  &kp AMPS &kp STAR &kp LPRN &kp RPRN 
		&kp TAB  &kp QMARK  &kp FSLH  &kp COLN  &kp SCLN 			&kp LEFT &kp DOWN &kp UP  &kp RIGHT &kp UNDER 
		&kp GRAVE  &kp KPLS &kp LBKT &kp RBKT   &kp BSLH    		&kp MINUS &kp KP_EQUAL &kp LBRC &kp RBRC &kp BKSP
					                       &mo 3 &kp LGUI  	        &kp RGUI  &none
		>;
		};	
		
		tri_layer {
		bindings = <
		&reset &kp NUM_2 &kp NUM_3 &kp NUM_4 &kp &bootloader 		        &reset &kp NUM_7 &kp NUM_8 &kp NUM_9  &bootloader
		&kp C_VOLUME_UP &kp C_VOLUME_DOWN &kp C_PLAY_PAUSE &kp F4 &kp F5    &trans &kp NUM_4  &kp NUM_5 &kp NUM_6 &kp DOT 
		&bt BT_CLR  &bt BT_NXT &bt BT_PRV &out OUT_BLE &out OUT_USB         &kp NUM_0 &kp NUM_1  &kp NUM_2  &kp NUM_3 &trans   
					 &trans &trans  					                    &trans &trans 
		>;
		};	
        
	};
};
